#include <stdio.h>
#include <dirent.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <unistd.h>

#define PROC_DIR "/proc"
#define CMDLINE_FILE "/cmdline"
#define STAT_FILE "/stat"

// Función que verifica si una cadena es completamente numérica
int is_numeric(const char *str) {
    for (int i = 0; str[i] != '\0'; i++) {
        if (!isdigit(str[i])) {
            return 0; // No es numérico
        }
    }
    return 1; // Es numérico
}

// Función para leer el nombre del proceso desde el archivo /proc/[PID]/stat
void get_process_name(char *stat_path, char *name) {
    FILE *file = fopen(stat_path, "r");
    if (file) {
        fscanf(file, "%*d (%[^)])", name); // Lee el nombre entre paréntesis
        fclose(file);
    } else {
        strcpy(name, "(desconocido)");
    }
}

// Función principal
int main() {
    DIR *dir;
    struct dirent *entry;

    // Abre el directorio /proc
    if ((dir = opendir(PROC_DIR)) == NULL) {
        perror("No se pudo abrir /proc");
        return 1;
    }

    // Recorre las entradas del directorio /proc
    while ((entry = readdir(dir)) != NULL) {
        if (entry->d_type == DT_DIR && is_numeric(entry->d_name)) {
            // Es un directorio y el nombre es numérico (PID)

            char cmdline_path[256];
            char stat_path[256];
            snprintf(cmdline_path, sizeof(cmdline_path), "%s/%s%s", PROC_DIR, entry->d_name, CMDLINE_FILE);
            snprintf(stat_path, sizeof(stat_path), "%s/%s%s", PROC_DIR, entry->d_name, STAT_FILE);

            // Abrir el archivo cmdline
            FILE *cmdline_file = fopen(cmdline_path, "r");
            if (cmdline_file) {
                char cmdline[256];
                size_t length = fread(cmdline, 1, sizeof(cmdline), cmdline_file);
                fclose(cmdline_file);

                // Leer el nombre del proceso desde stat
                char process_name[256];
                get_process_name(stat_path, process_name);

                // Verifica si el archivo cmdline está vacío
                if (length == 0) {
                    printf("[%s] %s [proceso de kernel]\n", entry->d_name, process_name);
                } else {
                    printf("[%s] %s proceso de usuario\n", entry->d_name, process_name);
                }
            }
        }
    }

    closedir(dir);
    return 0;
}
